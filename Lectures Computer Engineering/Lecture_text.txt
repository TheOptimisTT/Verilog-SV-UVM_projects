Tuesday, 25 February 2025

ПК - лекция
Процесор дизайн 

Define our target application
Analyze and define the target SW organization
Defining or choose the programming language
Analyze what instructions we need and how many - target application instruction histogram.
Design the architecture
Refine the architecture
Optimize the common case
Design the logic - Verilog, System Verilog
Design verification -  System Verilog, UVM
Synthesis, STA, Physical Design, Production, Testing
Sales
Design example - Instruction Histogram Co-Processor

What is it? Why we need it?
LOAD, STORE, ADD, SUB,  MULT, DIV, LOOP, JUMP, STALL …
What we will illustrate ?
Data path structure and design
Going through the process of designing a pipeline
Pipeline stages …
Hazards
Product Requirements Specifications
Need to collect statistics of the instruction profile of a particular application,
    how many times a particular instruction has been executed in the course of running a particular application
Assume we have 8bit instruction code(256 instructions)
We have to be able to process one instruction every clock cycle
We have to process only when we have valid instructions, collect statistics only for instruction that have been executed
But we also need the STALL cycles.
Top Level System Design
Block diagram (here)
Start designing the Histogram Co-Processor
 What we have to do?
We need to count each executed instruction
We have 256 instructions
We need 256 counters
Each counter consists of a register and an adder
We need to accumulate statistics every cycle.
256 x (64-bit registers + 64-bit adders)
Instruction is decoded and one of the 256 counters is enabled for an update every cycle
Pipeline Control
Resource Control
Data Path Control
Instruction Flow Control
Pipeline Hazards
Structural hazard - compute resource conflicts
Data hazard - data dependencies
Control hazards
Program counter changes
Pipeline Stalls
Pipeline flush
Pipeline bubbles
Others
Data Hazards
What is a data hazard? When data is needed before its available.
The place where we fix data hazards is the first place we have a “ready” result.
Data Hazards related to two commands with one in between are handled in stage  2 and 3
Real Data Hazards are between stages: 3-4 2-4
Not a real data hazard is 1-4. It can be fixed with a Bypass.
Literature
John Hennessy & David Paterson 
‘Computer Architecture: A Quantitative Approach”
‘Computer Organization and Design: The Hardware / Software Interface”

=============== 11.03 ===============
=============== 11.03 ===============
=============== 11.03 ===============

Data Hazard 3 Data Forwarding
    Как правим запис в нашата памет. И как да предотвратим неправилни записи.
        Ако има невалидни инструкции трябва да пречим на тези инструкции да направят запис в нашата памет
    
    Това което можем да направим е да сложим още 1 бит към инструкцията която показва дали е валидна или не.
    Това означава че тази инструкция има WriteEnable

    Когато ресетнем системата паиплайна е пълен с нули и правим запис на адрес 0, но сега като имаме валид = 0,
    няма да има WE и няма да запише в паметта. Другия ефект е че ако има невалидна инструцкия нейнато стойност 
    няма да бъде записана в паметта. Също така ако има навалиден бранч няма да има невалидни записи.

    Какво означава валидна инструкция?

    Как може да накараме нашия процесор да изпулнява повече от 1 инструкция ?
        - трябва да решим какви инструкции искаме да добавим.
      
        
Processor with 8 instructions and 1 operand
    - трябва да модифицираме new instruction format - adding 3 bits to code the different instructions
        IW[10:8] = CMD_ID[2:0]
        IW[7:0] = OP_ID[7:0]
        IW[10:0] = {...}
    - Addinf ALU in the place of the adder. има 3 управляващи бита който се подават по s1-s3 reg.
          - instructions
            inc             3'b000, 
            dec             3'b001, 
            invert          3'b010, 
            reductoin OR    3'b011, 
            reduction AND   3'b100,
    - Новия модул АЛУ има 1 вход по който идват данните, команден интерфейс
      по който идва действието което ще се извърши, има и изход по който ще минат данните след обработка

Processor Enchancement: Adding more opperands. Processor with 7 instrucitons and 2 operands
    Update instruciton format
        IW[18:16] = CMD_ID[2:0]

        IW[15:8] = OP1_ID[7:0]
        IW[7:0] = OP0_ID[7:0]

        IW[18:0] = {CMD_ID, OP1_ID, OP0_ID}
    Като сме дефинирали новия IW се връщаме към конвеира и трябва да дефинираме още 1 входен регистър.

    Нашата памет трябва да се промени малко за да може да обслужва и другия операнд ака да може да го чете записването няма да
    бъде афектирано защото резултата ще е все още само един. Трябва да стане 3 портова памет.

    ДРуго което променяме е самото АЛУ. Трябва да добавим още 2 команди и още 1 вход.

    Никога 2рия операнд не трябва да зависи от резултата. Трябва така да напишем нашата програма че никога да не се получава запис
    на един от адресите от който четем операндите. 

    Друг проблем е че ние имаме резултат и винаги го записваме в адреса на операнд 0. Това е ограничение което трябва да се реши.
    В масата от случайте искам да вземем 2 числа да извършим операция на тях и да ги запишем в друг свободен адрес.
    Трябва да се добави опцията за запис в конкретен адрес. Затова се дефинира още едно поле което указва на кой адре
    ще има запис

        Update instruciton format
                IW[:]   = CMD_ID[2:0]
                IW[:]   = OP1_ID[7:0]
                IW[:]   = RSLT0_ID[7:0]
                IW[7:0] = OP0_ID[7:0]

                IW[18:0] = {CMD_ID, OP1_ID, OP0_ID}

    Единствения дефиция който има след това е че втория операнд няма data Forwarding. Което означава че трябва да добавим DF.

    След тази променя вече имаме един легитимин конвеир, който работи с 2 операнда и има 8 инструкции

За момента нямаме 2 неща което го различава от нормален процесор. 
Това са Branch + Flush(Инвалидиране на данни), Stall (Външна памент или Load/Store Unit)

// Друия път ще довършим това кодиране. Да се опитаме да подкараме симулациите до сега.

// Да видя презентацията за да видя промените в АЛУ, Новия Instruction Word и да добавя MUX-вете от новата схема.
// (5-stage-pipeline, OP1_ID, OP0_ID, RSLT_ID, more muxes)


================  18.03  ================
================  18.03  ================
================  18.03  ================


Pipeline processor design
Processor with 7 instrucitons and 2 opperand
    ALU UPDATE:
        -ADD, SUB
    2port Mem updata -> REG FILE(3port mem)
        - new file with 3port module
    New data Forwarding for op1.
    Word Update:
        - Result_ID

5 STAGE Pipeline 

================  19.03  ================
================    СУ   ================
================  19.03  ================
Основната функция на процесора който правим е да брой броя подадени
    инструкции към оригиналния процесор. Затова всяка инструкция към оригиналния процесор се явява адрес в нашия процесор.

Защо ICODE се подава на реад порта на MEM?
    - Защото искаме да прочетем какво е записано в нашата памет.

В базовия модел записа се извършва в клетката която е прочетена в началото.

Защо има ByPass reg ?
    Защото ние бройм в кой Stage се случват промените 


================  25.03  ================
================    Л    ================
================  25.03  ================

Processor Enchancement: Loading operands

Създаване и деклариране на Load & Store Controller
Създаване И деклариране на Instruction Fetch stages (2)

================  01.04  ================
================    Л    ================
================  01.04  ================

Въвеждане на операцията Stall. Това което прави е да замразява регистрите в текущата стойност във 
    всички Stages. Дргуго важно нещо е че ние ще спрем регистрите, но в даден момент ще имаме WE сигнал към паметта и 
    трябва да се в кои ситуации това ще е проблем и кога няма да е проблем.

Дефиниране на сигнал Stall. Ако има ресет се регистрите се ресетва. Другата проверка е дали има STALL ако има регистрите
    запазват собствената стойност. Като се махне Stall-a pipeline-a започва да се движи нормално.

Да вземем S0_addr(reg) -> S1_addr(reg) -> S2_addr(reg)
    Това което направихме е че си дефинирахме сигнал стал и пред всеки вход слагаме 1 мултиплексор и това което прави е 
        ако има сигнал Стал, мултиплексора избира изхода на регистъра следващия регистър и се презаписва. Ако няма стал
        мултиплексора избира стойността на предходния регистър и стойността се подава по пайлаина.
    При наличие на сигнал Стал, всики регистри работят на този принцип с изключение на няколко специални регистри като:
        LSU(Д-мем), intrerupt, NOSTALL регистри и други. Идеята е че има регистри който не трябва да бъдат спирани.
    Освен регистрите Стал трявба да маскира и някои от контролните сигнали като: WriteEnable. Ако не се маскират тези контролни 
        сигнали може да доведат до непредвидени записвания и евентуални проблеми.
    Stall сигнала зависи от това дали ще има LOAD операция, Ready(Load/Ready) сигнал... и други.
        При LOAD => Stall = 1, 
            Ready => Stall = 0;
    Има един "тънък" момент и това е че декодирането на Лоад трябва да се случи един цъкъл по рано защото Стал ще се генерира
        с един тактов цикъл по късно. Затова декодирането на LOAD се случва в LD_EXECSTAGE. Възможно е да се наложи да се декодира
        още по рано. Това зависи от големината на pipeline-a.
----
Нека да предположим че имаме многоядрена системата (4 ядра). Както казахме, тези ядра работят на 1 GHZ, нашия конвеир работи доста
    по бавно. До сега сме разглеждали само 1 ядро(1 конвеир), но сега имам 4 и всеки един от тях може да изпълнява процеси който да 
    комуникират помежду си. Затова ни трябва общ КЕШ (lvl2) чрез който ядрата да обменят данни. Performance-a на нашата система ще
    зависи от скоростта на интерфейса между ядрото и lvl1 Cache и lvl1 -> lvl2 cache. Цялото това движение на данните, това движение
    е определящо за перформанса на системата. Причината АМД да изпреварят Интел е че те измислиха доста по ефентивен и бърз начин
    за прехвърляне на данни между ядрата.
----
Flush. Как работи и какво се случва.

Сега трябва да споменем и часта от процесора който отговаря за (Instruction Fetch) FLOW CONTROL, иначе казано последователността от 
    инструкциите който се изпълняват. Понякога естествения flow на програмата трябва да се промени за да се изпълнят по приоритетни
    операции, или просто да се изхвърлят излишни данни.

По какъв начин ние променяме Program Counter-a ? 
    Може да се промени от условни оператори:
        If/Else, Case, Conditional Branch, Absolute Branch.

Причината програм каунтъра в риск 5 архитектурата да се увеличава с 4 е че той работи с 32битова система или 4 байта, ако беше 16 битва
    щеше да е +2. Следва че естествения инкремент на ПЦ е броя на байтове на архитектурата(битове).


=== !!! === !!! === !!! === !!! === !!! === !!! === !!! ===
Изпитни въпроси:
    Защо се използва Stall ?
    Защо се използва Flush ?
    Защо ни трябва Pipeline ?
    Видове Data dependencies ?
    За какво служат компараторите ?
    Какво обслужва pipeline-a с инкрементр-а?
=== !!! === !!! === !!! === !!! === !!! === !!! === !!! ===



